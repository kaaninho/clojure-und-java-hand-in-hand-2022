#+title: Clojure und Java – Hand in Hand!
#+author: Kaan Sahin, Active Group GmbH
#+REVEAL_PLUGINS: (notes)
#+REVEAL_THEME: active
#+REVEAL_ROOT: file:///home/kaan/tmp/reveal.js
#+REVEAL_HLEVEL: 100
#+REVEAL_TRANS: none
#+OPTIONS: num:nil toc:nil reveal-center:f reveal_slide_number:t
#+MACRO: newline   src_emacs-lisp[:results raw]{"\n "}
#+MACRO: TIKZ-IMG #+HEADER: :exports results :file $1 :imagemagick yes {{{newline}}} #+HEADER: :results raw {{{newline}}} #+HEADER: :headers '("\usepackage{tikz}") {{{newline}}} #+HEADER: :fit yes :imoutoptions -geometry $2 :iminoptions -density 600

* Clojure und Java – Hand in Hand!

#+HTML: <div style="width:300px;display:inline-block">
file:images/clojure.png
#+HTML: </div>

#+HTML: <div style="width:300px;display:inline-block">

#+HTML: </div>

#+HTML: <div style="max-width:250px;display:inline-block">
file:images/java.png
#+HTML: </div>

* Clojure und Java – Hand in Hand!

#+HTML: <div style="width:300px;display:inline-block">
file:images/clojure.png
#+HTML: </div>

#+HTML: <div style="width:300px;display:inline-block">
#+HTML: <center>
file:images/hands-shaking.png
#+HTML: </center>
#+HTML: </div>

#+HTML: <div style="max-width:250px;display:inline-block">
file:images/java.png
#+HTML: </div>


* Clojure und Java – Hand in Hand!

- Clojure 101
- Interop Java und Clojure
- Clojure in der Praxis

* Clojure

- Lisp-Dialekt
- kompiliert zu JVM-Bytecode
- unveränderliche Daten
- ermutigt funktionale Programmierung
- Interop mit Java
- besonderes Augenmerk auf Nebenläufigkeit

* Clojure

- *Lisp-Dialekt*
- kompiliert zu JVM-Bytecode
- unveränderliche Daten
- ermutigt funktionale Programmierung
- Interop mit Java
- besonderes Augenmerk auf Nebenläufigkeit


#+BEGIN_NOTES
- JVM: etablierte, anerkannte Umgebung
- funktional: immutable data & first-class functions
- Weil Lisp-Dialekt: Programmcode ist dem AST ähnlich
#+END_NOTES

* Clojure -- Lisp-Dialekt

*Syntax*

zwei Arten von Ausdrücken
- Atomare Ausdrücke
  #+begin_src clojure
  17                          ; Zahl
  "Hallo"                     ; Zeichenkette
  false                       ; Wahrheitswert                
  symbol                      ; Symbol
  :read-only?                 ; Keywords
  #+end_src
- zusammengesetzte Ausdrücke

  #+begin_src clojure
  (or false (> 2 1))
  #+end_src

* Clojure -- Lisp-Dialekt

*Präzedenz*

Java:

#+begin_src java
int b = 5 - 3 + 1;
#+end_src

* Clojure -- Lisp-Dialekt

*Präzedenz*

Java:

#+begin_src java
int b = 5 - 3 + 1;   // Abgemacht: (5 - 3) + 1
#+end_src

* Clojure -- Lisp-Dialekt

*Präzedenz*

Java:

#+begin_src java
int b = 5 - 3 + 1;
#+end_src

Clojure:

#+begin_src clojure
(+ (- 5 3)           ; in einer Zeile: (+ (- 5 3) 1)
   1)
#+end_src

* Clojure -- Lisp-Dialekt

*Präzedenz*

Java:

#+begin_src java
int b = 5 - 3 + 1;
#+end_src

Clojure:

#+begin_src clojure
(+ (- 5 3)
   1)
#+end_src


Java:

#+begin_src java
30+-3*5<<1>30==5<4||7>6&&7<6
#+end_src
???




* Clojure -- Lisp-Dialekt

*Syntax*

eingebaute Datenstrukturen

#+begin_src clojure
[1 2 3 4 5]                    ; Vektor
{:name "Kaan", :loc-per-day 5} ; Map / Dictionary
#{:rot :grün :blau}            ; Menge
#+end_src

* Clojure -- Lisp-Dialekt

*Syntax*

eingebaute Datenstrukturen

#+begin_src clojure
[1 2 3 4 5]                    ; Vektor
{:name "Kaan", :loc-per-day 5} ; Map / Dictionary
#{:rot :grün :blau}            ; Menge
#+end_src

sind Literale!

* Clojure -- Lisp-Dialekt

*Syntax*

eingebaute Datenstrukturen sind Literale

#+begin_src clojure
[{:name "Merve"
  :age 23
  :address {:street "Die Straße", :nr 12, :plz 72072}
  :meals ["Spätzle mit Soß'" "Nudelauflauf"]}
 {:name "Moritz"
  :age 15
  :address {:street "Jene Straße", :nr 2, :plz 22767}
  :meals ["Fischbrötchen" "Döner Kebab"]}]
#+end_src

* Clojure -- Lisp-Dialekt

*Syntax*

eingebaute Datenstrukturen sind Literale

#+begin_src clojure
[{:name "Merve"
  :age 23
  :address {:street "Die Straße", :nr 12, :plz 72072}
  :meals ["Spätzle mit Soß'" "Nudelauflauf"]}
 {:name "Moritz"
  :age 15
  :address {:street "Jene Straße", :nr 2, :plz 22767}
  :meals ["Fischbrötchen" "Döner Kebab"]}]
#+end_src

 => Clojure visualisiert Daten!
 
* Clojure -- Lisp-Dialekt

*Syntax*

#+begin_src clojure
(def pi 3.14159)           ; Definition         









#+end_src

* Clojure -- Lisp-Dialekt

*Syntax*

#+begin_src clojure
(def pi 3.14159)           ; Definition

(defn umfang [radius]      ; Funktionsdefinition     
  (* 2 pi radius))






#+end_src

* Clojure -- Lisp-Dialekt

*Syntax*

#+begin_src clojure
(def pi 3.14159)           ; Definition

(defn umfang               ; Funktionsdefinition mit Docstring
  "Berechnet den Umfang eines Kreises mit Radius `radius`"
  [radius]      
  (* 2 pi radius))




#+end_src


* Clojure -- Lisp-Dialekt

*Syntax*

#+begin_src clojure
(def pi 3.14159)           ; Definition

(defn umfang               ; Funktionsdefinition mit Docstring
  "Berechnet den Umfang eines Kreises mit Radius `radius`"
  [radius]      
  (* 2 pi radius))


repl> (umfang 4)
=> 25.13272
#+end_src

* Clojure

- Lisp-Dialekt
- kompiliert zu JVM-Bytecode
- *unveränderliche Daten*
- ermutigt funktionale Programmierung
- Interop mit Java
- besonderes Augenmerk auf Nebenläufigkeit

* Clojure -- Immutability

eingebaute Datenstrukturen

#+begin_src clojure
[1 2 3 4 5]                    ; Vektor
{:name "Kaan", :loc-per-day 5} ; Map
#{:rot :grün :blau}            ; Menge
#+end_src

sind *unveränderlich*

* Clojure -- Immutability

eingebaute Funktionen

#+begin_src clojure
(def vektor [1 2 3 4 5])

repl> (conj 6 vektor)
=> [1 2 3 4 5 6]

repl> vektor
=> [1 2 3 4 5]
#+end_src

*verändern* Objekte *nicht*

* Clojure -- Immutability

eingebaute Datenstrukturen sind *unveränderlich*

eingebaute Funktionen *verändern* Objekte *nicht* \\
=> geben *neue* Objekte zurück

* Clojure -- Immutability

#+HTML: <div><div style="max-width:400px;padding-left:130px">
file:images/effective-java.jpg
#+HTML: </div></div>

* Clojure -- Immutability

#+HTML: <div><div style="max-width:400px;padding-left:130px">
file:images/immutability.jpeg
#+HTML: </div></div>

* Clojure -- Immutability

#+HTML: <div style="display:flex;flex-direction:row">
#+HTML: <img src="images/immutability.jpeg" width="300px"></img>

#+HTML:<div style="flex: 1 0 auto">
"There are many good reasons for this: 

immutable classes are
- easier to design
- implement
- use
- less error prone and
- more secure

than mutable classes"
#+HTML: </div>

#+HTML: </div>

* Clojure -- Immutability

#+HTML: <div style="display:flex;flex-direction:row">
#+HTML: <img src="images/immutability.jpeg" width="300px"></img>

#+HTML:<div style="flex: 1 0 auto">

\\

*Rules*

1. Don't provide any methods that modify the object's state
2. Ensure that the class can't be extended
3. Make all fields =final=
4. Make all fields =private=
5. Ensure exclusive access to any mutable components
#+HTML: </div>

#+HTML: </div>

* Clojure -- Immutability

weitere Vorteile

- bessere Testbarkeit
- weniger Kopplung
- keine versteckten Abhängigkeiten
- Nebenläufigkeit einfacher und besser handhabbar

* Clojure -- Immutability

weitere Vorteile

- bessere Testbarkeit
- weniger Kopplung
- keine versteckten Abhängigkeiten
- Nebenläufigkeit einfacher und besser handhabbar

=> *verbessert Architektur!*

* Clojure -- Immutability

eingebaute Datenstrukturen sind *unveränderlich*

eingebaute Funktionen *verändern* Objekte *nicht* \\
=> geben *neue* Objekte zurück

\\

Effizienz?

* Clojure -- Immutability

Effizienz?

#+begin_src clojure
["a" "b" "c" "d" "f" "g" "h"]
#+end_src

* Clojure -- Immutability

Effizienz?

#+begin_src clojure
["a" "b" "c" "d" "f" "g" "h"]
#+end_src


#+HTML: <div><div style="max-width:400px;padding-left:130px">
[[file:images/Purely_functional_tree_before.svg]]
#+HTML: </div></div>

#+HTML: <div style="font-size:10px">
VineetKumar at English Wikipedia. - Transferred from en.wikipedia to Commons by sevela.p., CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=3594619
#+HTML: </div>

* Clojure -- Immutability

Effizienz?

#+begin_src clojure
["a" "b" "c" "d" "e" "f" "g" "h"]
#+end_src

#+HTML: <div><div style="max-width:400px;padding-left:130px">
[[file:images/Purely_functional_tree_after.svg]]
#+HTML: </div></div>

#+HTML: <div style="font-size:10px">
VineetKumar at English Wikipedia. - Transferred from en.wikipedia to Commons by sevela.p., CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=3594620
#+HTML: </div>

* Clojure

- Lisp-Dialekt
- kompiliert zu JVM-Bytecode
- unveränderliche Daten
- *ermutigt funktionale Programmierung*
- Interop mit Java
- besonderes Augenmerk auf Nebenläufigkeit

* Clojure -- funktionale Programmierung

#+begin_src clojure
(map #(+ 15 %) [1 2 3 4 5])



#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(map #(+ 15 %)
     [1 2 3 4 5])


#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(map #(+ 15 %)
     [1 2 3 4 5])

=> [16 17 18 19 20]
#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(filter (fn [person]
          (> (:age person) 17))
        [{:name "Merve", :age 23}
         {:name "Moritz", :age 15}
         {:name "Mara", :age 25}]))



#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(filter (fn [person]
          (> (:age person) 17))
        [{:name "Merve", :age 23}
         {:name "Moritz", :age 15}
         {:name "Mara", :age 25}]))

=> [{:name "Merve", :age 23}
    {:name "Mara", :age 25}]
#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(reduce (fn [acc person]
          (+ acc (:age person)))
        0
        [{:name "Merve", :age 23}
         {:name "Moritz", :age 15}
         {:name "Mara", :age 25}])


#+end_src

* Clojure -- funktionale Programmierung

#+begin_src clojure
(reduce (fn [acc person]
          (+ acc (:age person)))
        0
        [{:name "Merve", :age 23}
         {:name "Moritz", :age 15}
         {:name "Mara", :age 25}])

=> 63
#+end_src

* Clojure

- Lisp-Dialekt
- kompiliert zu JVM-Bytecode
- unveränderliche Daten
- ermutigt funktionale Programmierung
- *Interop mit Java*
- besonderes Augenmerk auf Nebenläufigkeit

* Clojure -- Interop mit Java

*Live-Demo*

* Clojure -- Interop mit Java

*Java in Clojure*

* Clojure -- Interop mit Java

*Clojure in Java*

* Funktionale Softwarearchitektur

*Functional Core -- Imperative Shell*

#+HTML: <div><div style="max-width:400px;">
[[file:images/functional-core.png]]
#+HTML: </div></div>


* Funktionale Softwarearchitektur

*Functional Core -- Imperative Shell*

1. *Businesslogik* (Domänenlogik) wird im Functional Core abgebildet \\
   => mit unveränderbaren Datenstrukturen \\
   => mit puren Funktionen

* Funktionale Softwarearchitektur

*Functional Core -- Imperative Shell*

1. *Businesslogik* (Domänenlogik) wird im Functional Core abgebildet \\
   => mit unveränderbaren Datenstrukturen \\
   => mit puren Funktionen

2. *Infrastruktur-Code* in der Imperative Shell \\
   => mit veränderbaren Datenstrukturen \\
   => mit Funktionen, die Seiteneffekte ausführen

* Funktionale Softwarearchitektur

*Functional Core -- Imperative Shell*

1. *Businesslogik* (Domänenlogik) wird im Functional Core abgebildet \\
   => mit unveränderbaren Datenstrukturen \\
   => mit puren Funktionen

2. *Infrastruktur-Code* in der Imperative Shell \\
   => mit veränderbaren Datenstrukturen \\
   => mit Funktionen, die Seiteneffekte ausführen

3. Die Imperative Shell benutzt den Functional Core, \\
   aber der Functional Core weiß nichts von der Shell

* Statements

* Statements

\\

#+HTML: <blockquote>
Ne, unser Projekt ist in Java geschrieben, wechseln geht nicht
#+HTML: </blockquote>

* Statements

* Statements

\\

#+HTML: <blockquote>
Ein Clojure-Projekt wäre zu riskant, da gibt's doch kaum Entwickler:innen!
#+HTML: </blockquote>

* Wie gehts weiter?

#+HTML: <div><div style="max-width:400px;padding-left:130px">
file:images/active-group.png
#+HTML: </div></div>


- Wir geben Schulungen in:
  - Einführung in die funktionale Programmierung
  - iSAQB FOUNDATION: Grundausbildung Softwarearchitektur
  - iSAQB FUNAR: Funktionale Softwarearchitektur
  - iSAQB FLEX: Microservices und Self-Contained Systems

- Blog https://funktionale-programmierung.de
